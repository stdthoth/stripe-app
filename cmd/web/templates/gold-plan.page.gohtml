{{template "base" . }}

{{define "title"}}
   Gold Plan
{{end}}

{{define "content"}}
   {{$image:= index .Data "images"}}
    <h2 class="mt-3 text-center">Buy a Gold Plan: {{formatCurrency $image.Price}} </h2>
    <hr>

    <div class= "alert alert-danger text-center d-none" id="card-messages"></div>

    <form action="/payement-succeeded-new" 
    method="post" name="charge_form" 
    id="charge_form" class="d-block needs-validation charge-form" 
    autocomple="off" novalidate="">

    <input class="hidden" name="product_id" id="product_id" value="{{$widget.ID}}">
    <input class="hidden" name="amount" id="amount" value="{{$widget.ID}}">

    <h3 class="mt-2 text-center mb-3">{{$image.Name}}:{{formatCurrency $image.Price}}</h3>
    <p>{{$image.Description}}</p>
        

        <div class="mb-3">
            <label for="cardholder-name" class="form-label">First Name</label>
            <input class="text" class="form-control" id="first-name" name="first_name"
                required="" autocomplete="first-name-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-name" class="form-label">Last Name</label>
            <input class="text" class="form-control" id="last-name" name="last_name"
                required="" autocomplete="last-name-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-name" class="form-label"> Name on Card</label>
            <input class="text" class="form-control" id="cardholder-name" name="cardholder_name"
                required="" autocomplete="cardholder-name-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-email" class="form-label">E-mail</label>
            <input class="text" class="form-control" id="cardholder-email" name="email"
                required="" autocomplete="cardholder-email-new">
        </div>

        <div class="mb-3">
            <label for="card-element" class="form-label">Credit Card</label>
            <div id="card-element" class="form-control"></div>
            <div  class="alert-danger text-center" id="card-errors" role="alert"></div>
            <div class="alert-success text-center" id="card-success" role="alert"></div>
        </div>
        <hr>

        <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onClick="val()">Pay {{formatCurrency $image.Price}}/month</a>

        <div id ="processing-payment">
            <div class ="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading......</span>
            </div>
        </div>

        <input type="hidden" name="payment_method" id="payment_method">
        <input type="hidden" name="payment_intent" id="payment_intent">
        <input type="hidden" name="payment_amount" id="payment_amount">
        <input type="hidden" name="payment_currency" id="payment_currency">
        
    </form>
{{define "js"}}

{{$image:= index .Data "images"}}
<script src ="https://js.stripe.com/v3"></script>

<script>
   let stripe; 
    let card;

    const cardMessages = document.getElementById("card-messages");
    const payButton = document.getElementById("pay-button");
    const processing = document.getElementById("processing-payment");

    stripe = Stripe({{.StripePubishableKey}});

    function hidePayButton() {
        payButton.classList.add("d-none");
        processing.classList.remove("d-none");
    }

    function showPayButton() {
        payButton.classList.remove("d-none");
        processing.classList.add("d-none");
    }

    function showCardError(msg) {
        cardMessages.classList.add("alert-danger");
        cardMessages.classList.remove("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = msg;
    }

    function showCardSuccess(msg) {
        cardMessages.classList.remove("alert-danger");
        cardMessages.classList.add("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = "Transaction successful";
    }

    function val() {
        let form = document.getElementById("charge_form");
        if (form.checkValidity() === false) {
            this.event.preventDefault();
            this.event.stopPropagation();
            form.classList.add("was-validated");
            return
        }
        form.classList.add("was-validated");
        hidePayButton();

        let chargeAmount = document.getElementById("payment_amount").value

        stripe.CreatePaymentMethod({
            type:'card',
            card: card,
            billing_details: email.getElementById("cardholder_email").value

        }).then(stripePaymentHandler);

        function stripePaymentHandler(result) {
            if (result.error) {
                showCardError(result.error.message)
            } else {
                // create customer and subscribe to plans 
                let payload = {
                    product_id: document.getElementById("product_id").value,
                    plan: '{{$image.PlanID}}',
                    payment_method: result.paymentMethod.id,
                    email:email.getElementById("cardholder_email").value,
                    last_four: result.paymentMethod.card.last4,
                    card_brand: result.paymentMethod.card.brand,
                    expiry_month: result.paymentMethod.card.exp_month,
                    expiry_year: result.payment_method.card.exp_year,
                    first_name:document.getElementById("first-name").value,
                    last_name: document.getElementById("last_name").value,
                    amount: document.getElementById("amount").value
                }

                const request = {
                    method: 'post',
                    headers: {
                        'Accept': 'application/json'
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload),
                }

                fetch('{{.API}}/api/create-subplan',request)
                .then(response => response.json())
                .then(function(data){
                    console.log(data)
                    processing.classList.add("d-none");
                    //set hidden variables
                    //submit the form
                })
            }


        
        }
    }


    (function () {
        const elements = stripe.elements();
        const style = {
            base:{
                fontSize: '16px',
                lineHeight: '24px'
            }
        };

        card = elements.create('card', {
            style:style,
            hidePostalCode: false,
        });

        card.mount("#card-element")

        //check for input errors
        card.addEventListener('change',function(event){
            var displayError = document.getElementById("card-errors");
            if (event.error) {
                displayError.classList.remove('d-none');
                displayError.textContent = event.error.message;
            } else {
                displayError.classList.add('d-none');
                displayError.textContent = '';
            }
        })
    })();
</script>

{{end}}